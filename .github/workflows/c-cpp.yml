# Nama alur kerja (workflow) yang akan ditampilkan di tab "Actions" pada repositori GitHub Anda.
name: Build for Windows

# Pemicu (Triggers): Mendefinisikan kapan alur kerja ini akan dijalankan secara otomatis.
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

# Jobs: Daftar pekerjaan (tasks) yang akan dieksekusi dalam alur kerja ini.
jobs:
  build:
    # 'runs-on' menentukan jenis mesin virtual yang akan digunakan untuk menjalankan pekerjaan ini.
    # 'windows-latest' menjamin lingkungan build yang bersih setiap saat.
    runs-on: windows-latest

    # Steps: Rangkaian langkah-langkah sekuensial yang akan dieksekusi oleh pekerjaan "build".
    steps:
      # Langkah 1: Checkout Kode Sumber
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # Mengunduh semua submodule seperti Leptonica.
          submodules: 'recursive'

      # Langkah 2: Setup Visual Studio Build Tools
      - name: Setup Visual Studio Build Tools
        uses: microsoft/setup-msbuild@v2

      # Langkah 3: Setup Developer Command Prompt
      - name: Setup Developer Command Prompt
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      # Langkah 4: Cache vcpkg untuk mempercepat build
      - name: Cache vcpkg
        uses: actions/cache@v4
        with:
          path: |
            C:/vcpkg
            C:/vcpkg/installed
          key: ${{ runner.os }}-vcpkg-msvc-${{ hashFiles('**/vcpkg.json') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-msvc-

      # Langkah 5: Setup vcpkg
      - name: Setup vcpkg
        run: |
          if (!(Test-Path "C:/vcpkg")) {
            git clone https://github.com/Microsoft/vcpkg.git C:/vcpkg
            cd C:/vcpkg
            ./bootstrap-vcpkg.bat
          }
          echo "C:/vcpkg" >> $env:GITHUB_PATH
        shell: pwsh

      # Langkah 6: Setup Ninja build system
      - name: Setup Ninja
        uses: seanmiddleditch/gha-setup-ninja@master

      # Langkah 7: Instal Dependensi Menggunakan vcpkg (minimal dependencies)
      - name: Install dependencies via vcpkg
        run: |
          vcpkg install leptonica:x64-windows
          vcpkg install libarchive:x64-windows
          echo "Installed packages:"
          vcpkg list
        shell: pwsh

      # Langkah 8: Mengkonfigurasi Proyek dengan CMake (minimal build)
      - name: Configure CMake
        run: >
          cmake -G "Visual Studio 17 2022" -A x64 -S . -B build
          -DCMAKE_BUILD_TYPE=Release
          -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake
          -DBUILD_TRAINING_TOOLS=OFF
          -DSW_BUILD=OFF
          -DBUILD_SHARED_LIBS=ON
          -DOPENMP_BUILD=OFF
          -DCPPAN_BUILD=OFF
          -DUSE_SYSTEM_ICU=OFF
          -DDISABLE_CURL=ON
          -DCMAKE_INSTALL_PREFIX=build/install

      # Langkah 9: Mengkompilasi Kode dan Menjalankan Instalasi
      - name: Build
        run: cmake --build build --config Release --target install

      # Langkah 10: Verify Build Output
      - name: Verify Build Output
        shell: pwsh
        run: |
          Write-Host "Checking build output directory structure:"
          if (Test-Path "build/install") {
            Write-Host "Contents of build/install:"
            Get-ChildItem -Recurse "build/install" | Select-Object FullName, Length
          } else {
            Write-Host "build/install directory not found"
            Write-Host "Checking other possible locations:"
            $possiblePaths = @("build/bin", "build/Release", "build")
            foreach ($path in $possiblePaths) {
              if (Test-Path $path) {
                Write-Host "Contents of $path :"
                Get-ChildItem -Recurse $path | Select-Object FullName, Length
              }
            }
          }

      # Langkah 11: Create ZIP Archive
      - name: Create ZIP Archive
        shell: pwsh
        run: |
          # Create output directory
          New-Item -ItemType Directory -Force -Path "output"
          
          # Find the build output directory with more comprehensive search
          $buildOutput = $null
          $possiblePaths = @(
            "build/install/bin",
            "build/install", 
            "build/bin/Release",
            "build/Release",
            "build/bin"
          )
          
          Write-Host "Searching for build output..."
          foreach ($path in $possiblePaths) {
            Write-Host "Checking: $path"
            if (Test-Path $path) {
              $files = Get-ChildItem -Path $path -File -Recurse
              Write-Host "Found $($files.Count) files in $path"
              if ($files.Count -gt 0) {
                # Look specifically for tesseract.exe or any .exe files
                $exeFiles = $files | Where-Object { $_.Extension -eq ".exe" }
                if ($exeFiles.Count -gt 0) {
                  Write-Host "Found executable files in: $path"
                  $buildOutput = $path
                  break
                }
              }
            } else {
              Write-Host "Path does not exist: $path"
            }
          }
          
          if (-not $buildOutput) {
            Write-Host "No build output with executables found. Checking all build directories..."
            # Fallback: show all contents of build directory
            if (Test-Path "build") {
              Write-Host "Complete build directory structure:"
              Get-ChildItem -Recurse "build" | Where-Object { $_.PSIsContainer -eq $false } | Select-Object FullName, Length
              
              # Try to find any .exe files anywhere in build
              $allExeFiles = Get-ChildItem -Recurse "build" -Filter "*.exe"
              if ($allExeFiles.Count -gt 0) {
                Write-Host "Found .exe files:"
                $allExeFiles | ForEach-Object { Write-Host $_.FullName }
                # Use the directory of the first .exe file found
                $buildOutput = Split-Path $allExeFiles[0].FullName -Parent
                Write-Host "Using directory of first .exe found: $buildOutput"
              }
            }
          }
          
          if (-not $buildOutput) {
            Write-Error "No build output found!"
            exit 1
          }
          
          # Create staging directory (direct files, not nested folder)
          $stagingDir = "output/staging"
          New-Item -ItemType Directory -Force -Path $stagingDir
          
          # Copy build output files directly to staging (only files, not directories)
          Write-Host "Copying executable files from $buildOutput to $stagingDir"
          $buildFiles = Get-ChildItem -Path $buildOutput -File
          foreach ($file in $buildFiles) {
            Copy-Item $file.FullName (Join-Path $stagingDir $file.Name) -Force
            Write-Host "Copied: $($file.Name)"
          }
          
          # Copy specific required DLL dependencies
          Write-Host "Copying required DLL dependencies..."
          $vcpkgBinPath = "C:/vcpkg/installed/x64-windows/bin"
          
          # Define exact DLL names that are required
          $requiredDlls = @(
            "gif.dll",
            "jpeg62.dll", 
            "leptonica-1.85.0.dll",
            "liblzma.dll",
            "libpng16.dll",
            "libsharpyuv.dll",
            "libwebp.dll",
            "libwebpmux.dll",
            "openjp2.dll",
            "tiff.dll",
            "zlib1.dll",
            "archive.dll",
            "bz2.dll",
            "lz4.dll"
          )
          
          if (Test-Path $vcpkgBinPath) {
            Write-Host "Checking vcpkg bin path: $vcpkgBinPath"
            Write-Host "Available DLLs in vcpkg bin:"
            Get-ChildItem -Path $vcpkgBinPath -Filter "*.dll" | ForEach-Object {
              Write-Host "  Available: $($_.Name)"
            }
            
            Write-Host "`nCopying required DLLs:"
            foreach ($dllName in $requiredDlls) {
              $sourcePath = Join-Path $vcpkgBinPath $dllName
              $destPath = Join-Path $stagingDir $dllName
              
              if (Test-Path $sourcePath) {
                Copy-Item $sourcePath $destPath -Force
                Write-Host "  ✓ Copied: $dllName"
              } else {
                Write-Warning "  ✗ NOT FOUND: $dllName"
                # Try to find similar named files
                $similarFiles = Get-ChildItem -Path $vcpkgBinPath -Filter "*$($dllName.Split('.')[0])*" -ErrorAction SilentlyContinue
                if ($similarFiles.Count -gt 0) {
                  Write-Host "    Similar files found:"
                  $similarFiles | ForEach-Object { Write-Host "      $($_.Name)" }
                }
              }
            }
          } else {
            Write-Warning "vcpkg bin path not found: $vcpkgBinPath"
          }
          
          # Remove the tessdata and share directory copying to avoid subfolders
          # We'll only copy essential files to keep the ZIP clean
          
          # Copy root level additional files if they exist (only files)
          $additionalFiles = @("README.md", "LICENSE", "CHANGELOG.md")
          foreach ($file in $additionalFiles) {
            if (Test-Path $file) {
              Copy-Item $file (Join-Path $stagingDir (Split-Path $file -Leaf)) -Force
              Write-Host "Copied $file to staging directory"
            }
          }
          
          # Create version info file
          $versionInfo = "Tesseract OCR - Windows x64 Build`n"
          $versionInfo += "Build Date: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')`n"
          $versionInfo += "Built from commit: $env:GITHUB_SHA`n"
          $versionInfo += "Repository: $env:GITHUB_REPOSITORY`n"
          $versionInfo += "Workflow: $env:GITHUB_WORKFLOW`n"
          
          $versionInfo | Out-File -FilePath "$stagingDir/BUILD_INFO.txt" -Encoding UTF8
          
          # List all DLL files that are actually included
          Write-Host "`nFinal DLL files included in the package:"
          Get-ChildItem -Path $stagingDir -Filter "*.dll" | ForEach-Object {
            Write-Host "  $($_.Name) - $([math]::Round($_.Length / 1KB, 2)) KB"
          }
          
          # Verify we have the required DLLs
          Write-Host "`nVerifying required DLLs:"
          $missingDlls = @()
          foreach ($dllName in $requiredDlls) {
            $dllPath = Join-Path $stagingDir $dllName
            if (Test-Path $dllPath) {
              Write-Host "  ✓ $dllName"
            } else {
              Write-Host "  ✗ $dllName (MISSING)"
              $missingDlls += $dllName
            }
          }
          
          if ($missingDlls.Count -gt 0) {
            Write-Warning "Missing required DLLs: $($missingDlls -join ', ')"
            Write-Host "Build will continue, but the executable might not work properly"
          }
          
          # Show contents of staging directory (should only be files now)
          Write-Host "`nFinal contents of staging directory (files only):"
          Get-ChildItem $stagingDir -File | Select-Object Name, Length
          
          # Create ZIP file using simple Compress-Archive with wildcard
          $zipName = "tesseract-ocr-windows-x64.zip"
          $zipPath = "output/$zipName"
          
          # Remove existing ZIP if it exists
          if (Test-Path $zipPath) {
            Remove-Item $zipPath -Force
          }
          
          # Compress only the files (not directories) from staging
          $filesToCompress = Join-Path $stagingDir "*"
          Compress-Archive -Path $filesToCompress -DestinationPath $zipPath -CompressionLevel Optimal
          
          Write-Host "Created ZIP file: $zipPath"
          
          # Verify ZIP file was created
          if (Test-Path $zipPath) {
            $zipSize = (Get-Item $zipPath).Length
            Write-Host "ZIP file size: $([math]::Round($zipSize / 1MB, 2)) MB"
          } else {
            Write-Error "Failed to create ZIP file!"
            exit 1
          }

      # Langkah 12: Upload Build Artifact
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: tesseract-ocr-windows-x64
          path: output/tesseract-ocr-windows-x64.zip
          retention-days: 30
