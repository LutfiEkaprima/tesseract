# Nama alur kerja (workflow) yang akan ditampilkan di tab "Actions" pada repositori GitHub Anda.
name: Installer for Windows

# Pemicu (Triggers): Mendefinisikan kapan alur kerja ini akan dijalankan secara otomatis.
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

# Jobs: Daftar pekerjaan (tasks) yang akan dieksekusi dalam alur kerja ini.
jobs:
  build:
    # 'runs-on' menentukan jenis mesin virtual yang akan digunakan untuk menjalankan pekerjaan ini.
    # 'windows-latest' menjamin lingkungan build yang bersih setiap saat.
    runs-on: windows-latest

    # Steps: Rangkaian langkah-langkah sekuensial yang akan dieksekusi oleh pekerjaan "build".
    steps:
      # Langkah 1: Checkout Kode Sumber
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # Mengunduh semua submodule seperti Leptonica.
          submodules: 'recursive'

      # Langkah 2: Setup Visual Studio Build Tools
      - name: Setup Visual Studio Build Tools
        uses: microsoft/setup-msbuild@v2

      # Langkah 3: Setup Developer Command Prompt
      - name: Setup Developer Command Prompt
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      # Langkah 4: Cache vcpkg untuk mempercepat build
      - name: Cache vcpkg
        uses: actions/cache@v4
        with:
          path: |
            C:/vcpkg
            C:/vcpkg/installed
          key: ${{ runner.os }}-vcpkg-msvc-${{ hashFiles('**/vcpkg.json') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-msvc-

      # Langkah 5: Setup vcpkg
      - name: Setup vcpkg
        run: |
          if (!(Test-Path "C:/vcpkg")) {
            git clone https://github.com/Microsoft/vcpkg.git C:/vcpkg
            cd C:/vcpkg
            ./bootstrap-vcpkg.bat
          }
          echo "C:/vcpkg" >> $env:GITHUB_PATH
        shell: pwsh

      # Langkah 6: Setup Ninja build system
      - name: Setup Ninja
        uses: seanmiddleditch/gha-setup-ninja@master

      # Langkah 7: Instal Dependensi Menggunakan vcpkg (minimal dependencies)
      - name: Install dependencies via vcpkg
        run: |
          vcpkg install leptonica:x64-windows
          vcpkg install libarchive:x64-windows
          echo "Installed packages:"
          vcpkg list
        shell: pwsh

      # Langkah 8: Mengkonfigurasi Proyek dengan CMake (minimal build)
      - name: Configure CMake
        run: >
          cmake -G "Visual Studio 17 2022" -A x64 -S . -B build
          -DCMAKE_BUILD_TYPE=Release
          -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake
          -DBUILD_TRAINING_TOOLS=OFF
          -DSW_BUILD=OFF
          -DBUILD_SHARED_LIBS=ON
          -DOPENMP_BUILD=OFF
          -DCPPAN_BUILD=OFF
          -DUSE_SYSTEM_ICU=OFF
          -DDISABLE_CURL=ON
          -DCMAKE_INSTALL_PREFIX=build/install

      # Langkah 9: Mengkompilasi Kode dan Menjalankan Instalasi
      - name: Build
        run: cmake --build build --config Release --target install

      # Langkah 10: Setup MSYS2 untuk NSIS build script
      - name: Setup MSYS2 for NSIS
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            git
            make
            unzip
            wget
            p7zip
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-ninja

      # Langkah 11: Menginstal NSIS (Alat Pembuat Installer)
      - name: Install NSIS
        run: choco install nsis -y

      # Langkah 12: Create modified build script
      - name: Create Windows-compatible build script
        shell: msys2 {0}
        run: |
          # Create a Windows-compatible version of the build script
          cat > nsis/build-windows.sh << 'EOF'
          #!/bin/bash
          set -ex
          
          LANG=C.UTF-8
          
          # Set architecture
          ARCH=""
          if [ "$ARCH" = "i686" ]; then
              ARCH=i686
          else
              ARCH=x86_64
          fi
          
          MINGW=/mingw64
          ROOTDIR=$(pwd)
          DISTDIR="$ROOTDIR/dist"
          HOST=x86_64-w64-mingw32
          TAG=$(cat VERSION).$(date +%Y%m%d)
          BUILDDIR="bin/ndebug/$HOST-$TAG"
          PKG_ARCH=mingw-w64-x86-64
          
          # Install required MSYS2 packages instead of apt packages
          echo "Installing MSYS2 packages..."
          pacman -S --noconfirm --needed \
              mingw-w64-x86_64-leptonica \
              mingw-w64-x86_64-libarchive \
              mingw-w64-x86_64-curl \
              mingw-w64-x86_64-icu \
              mingw-w64-x86_64-pango \
              mingw-w64-x86_64-cairo || true
          
          # Create directories
          mkdir -p "$DISTDIR"
          mkdir -p "$BUILDDIR"
          
          echo "Build script completed successfully"
          EOF
          
          chmod +x nsis/build-windows.sh

      # Langkah 13: Run the Windows-compatible build script
      - name: Build installer preparation
        shell: msys2 {0}
        run: bash nsis/build-windows.sh

      # Langkah 14: Copy built files for installer
      - name: Prepare installer files
        shell: pwsh
        run: |
          # Create installer directory structure
          New-Item -ItemType Directory -Force -Path "nsis/installer"
          
          # Copy built tesseract files
          if (Test-Path "build/install/bin") {
            Copy-Item -Recurse "build/install/bin/*" "nsis/installer/"
          }
          
          # Create a simple NSIS script if it doesn't exist
          if (!(Test-Path "nsis/tesseract.nsi")) {
            @"
          !define PRODUCT_NAME "Tesseract OCR"
          !define PRODUCT_VERSION "5.5.1"
          !define PRODUCT_PUBLISHER "Tesseract OCR Team"
          !define PRODUCT_WEB_SITE "https://github.com/tesseract-ocr/tesseract"
          
          SetCompressor lzma
          
          Name "`${PRODUCT_NAME} `${PRODUCT_VERSION}"
          OutFile "tesseract-ocr-`${PRODUCT_VERSION}-setup.exe"
          InstallDir "`$PROGRAMFILES64\Tesseract-OCR"
          
          Section "MainSection" SEC01
            SetOutPath "`$INSTDIR"
            File /r "installer\*"
            WriteRegStr HKLM "SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\TesseractOCR" "DisplayName" "`${PRODUCT_NAME}"
            WriteRegStr HKLM "SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\TesseractOCR" "UninstallString" "`$INSTDIR\uninstall.exe"
            WriteUninstaller "`$INSTDIR\uninstall.exe"
          SectionEnd
          
          Section "Uninstall"
            Delete "`$INSTDIR\*.*"
            RMDir /r "`$INSTDIR"
            DeleteRegKey HKLM "SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\TesseractOCR"
          SectionEnd
          "@ | Out-File -FilePath "nsis/tesseract.nsi" -Encoding UTF8
          }

      # Langkah 15: Build NSIS installer
      - name: Build NSIS installer
        run: |
          cd nsis
          & "C:\Program Files (x86)\NSIS\makensis.exe" tesseract.nsi
        shell: pwsh

      # Langkah 16: Mengunggah Installer sebagai "Artifact"
      - name: Upload installer
        uses: actions/upload-artifact@v4
        with:
          name: tesseract-ocr-installer-windows
          path: nsis/tesseract-ocr-*.exe
